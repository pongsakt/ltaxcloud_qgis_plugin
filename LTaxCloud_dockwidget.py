# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LTaxCloudDockWidget
                                 A QGIS plugin
 This plugin upload gis data to server
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Pongsak / SmartApp Services and Solutions Co.,Ltd
        email                : ltaxdev@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import tempfile
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import *
from qgis.utils import iface
from qgis.core import *
from qgis.gui import *
from os.path import basename


import requests
from .requests_toolbelt.multipart import encoder
# from processing.tools import *
# from processing.core.Processing import Processing
# Processing.initialize()

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'LTaxCloud_dockwidget_base.ui'))


class LTaxCloudDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(LTaxCloudDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.setupUi(self)
        self.initUI()
    
    def initUI(self):
        
        self.setting = QSettings()
        self.url = "http://mapu.ltax.in.th/"
        self.token = self.setting.value("LTax4/token", "")
        self.secret_txt = self.setting.value("LTax4/secret", "")
        self.username_txt = self.setting.value("LTax4/username", "")
        self.password_txt = self.setting.value("LTax4/password", "")

        self.reloadBtn.pressed.connect(self.reload)
        self.uploadBtn.pressed.connect(self.uploadLayer)
        self.boundBtn.pressed.connect(self.sendExtent)
        self.loginBtn.pressed.connect(self.login)
        self.logoutBtn.pressed.connect(self.logout)
        self.reloadBtn_2.pressed.connect(self.addSpecialLayer)

        self.guiControl()

    
    def guiControl(self):
        if self.token != "":
            self.boundBtn.setEnabled(True)
            self.uploadBtn.setEnabled(True)
            self.reloadBtn.setEnabled(True)
            self.comboBox.setEnabled(True)
            self.comboBox_2.setEnabled(True)
            self.secret_txt = self.setting.value("LTax4/secret", "")
            self.username.setText(self.setting.value("LTax4/username", ""))
            self.password.setText(self.password_txt)
            self.secret.setText(self.secret_txt)
            self.loginBtn.setEnabled(False)
            self.password.setEnabled(False)
            self.username.setEnabled(False)
            self.logoutBtn.setEnabled(True)


            self.comboBox_2.addItem(unicode(f"DOL_PARCEL_47"))
            self.comboBox_2.addItem(unicode(f"DOL_PARCEL_48"))

        else:
            self.boundBtn.setEnabled(False)
            self.uploadBtn.setEnabled(False)
            self.reloadBtn.setEnabled(False)
            self.comboBox.setEnabled(False)
            self.comboBox_2.setEnabled(False)
            self.logoutBtn.setEnabled(False)
            self.password.setEnabled(True)
            self.username.setEnabled(True)
            self.loginBtn.setEnabled(True)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    #LTAX FUNCTION
    def reload(self):
        self.populateLayers(1)
    
    def populateLayers(self, page):
        self.comboBox.clear()
        layermap = QgsProject.instance().mapLayers()
        for layer in layermap.values():
            if page == 1:
                self.comboBox.addItem(unicode(layer.name()))
            else:
                self.selPacelLyr.addItem(unicode(layer.name()))

            if layer == iface.activeLayer():
                if page == 1:
                    self.comboBox.setCurrentIndex(self.comboBox.count() - 1)
                else:
                    self.selPacelLyr.setCurrentIndex(
                        self.selPacelLyr.count() - 1)
    
    def getMapLayerByName(self, myName):
        layermap = QgsProject.instance().mapLayers()
        for layer in layermap.values():
            if layer.name() == myName:
                if layer.isValid():
                    return layer
                else:
                    return None
    
    def addSpecialLayer(self):
        name=self.comboBox_2.currentText()
        if(name =="DOL_PARCEL_47"):
            lyr ="V_PARCEL47"
        else:
            lyr = "V_PARCEL48"
        url =f"https://map-proxy.ltax.in.th/dol2.php?service=WMS&request=GetMap&version=1.1.1&layers=LANDSMAPS:{lyr}&format=image/png&transparent=true&token="+self.token
        layer = QgsRasterLayer(url,name)
        QgsProject.instance().addMapLayer(layer)
    
    def login(self):
        ""
        uname = self.username.text()
        pwd = self.password.text()
        secret_txt = self.secret.text()
        secret_txt = secret_txt.replace("http://","")
        secret_txt = secret_txt.replace("/","")
        payload = {'username': uname, 'password': pwd}
        headers = {'Content-type': 'application/json', 'session': secret_txt}
        r = requests.post(self.url+"api/LTaxGIS/login", json=payload, verify=False, headers=headers)
        if r.status_code == requests.codes.ok:
            data = r.json()
            self.token = data["token"]
            s = QSettings()
            s.setValue("LTax4/token", self.token)
            s.setValue("LTax4/secret", secret_txt)
            self.guiControl()
            self.tabWidget.setCurrentIndex(0)
            iface.messageBar().pushMessage("Success","Login successful.", level=Qgis.Info, duration=2)
        elif r.status_code == requests.codes.unauthorized:
            iface.messageBar().pushMessage("UnAuthorized", "UnAuthorized this username or password was not correct.",level=Qgis.Critical, duration=2)
        else:
            iface.messageBar().pushMessage("ERROR", "Error Please contact ltaxdev@gmail.com ",level=Qgis.Critical, duration=2)

    def logout(self):
        s = QSettings()
        s.setValue("LTax4/token", '')
        s.setValue("LTax4/username", '')
        s.setValue("LTax4/password", '')
        s.setValue("LTax4/secret", '')
        self.token = ""
        self.username.setText("")
        self.password.setText("")
        self.guiControl()
        iface.messageBar().pushMessage("Logout success", "Logout successful.",level=Qgis.Info, duration=2)

    def uploadLayer(self):
        mLayerName = self.comboBox.currentText()
        layer = self.getMapLayerByName(unicode(mLayerName))
        lyr_base_name = basename(layer.source())
        lyr_name = os.path.splitext(lyr_base_name)[0]
        # path = tempfile.gettempdir()
        # path = "c:/tmp"
        path = tempfile.gettempdir()
        epsg_code = 4326  # WGS 84
        crs = QgsCoordinateReferenceSystem(epsg_code)
        error = QgsVectorFileWriter.writeAsVectorFormat(layer, f"{path}/{lyr_name}.sqlite","utf-8",crs,"SQLite")
        def create_callback(encoder):
            def callback(monitor):
                self.progressBar.setValue(
                    monitor.bytes_read * 100 / encoder.len)
            return callback
        if error[0] == QgsVectorFileWriter.NoError:
            file_name = f"{path}/{lyr_name}.sqlite"
            e = encoder.MultipartEncoder(
                fields={'file': (lyr_name + '.sqlite', open(file_name, 'rb'))})
            m = encoder.MultipartEncoderMonitor(e, create_callback(e))
            headers = {'Content-Type': m.content_type, 'Authorization': 'Bearer ' +self.token,'session':self.secret_txt}
            r = requests.post(self.url+"api/LTaxGIS/Cloud/upload", data=m, headers=headers, verify=False)
            if r.status_code == requests.codes.ok:
                iface.messageBar().pushMessage("Completed", "Upload Data Completed",level=Qgis.Info, duration=2)
                self.progressBar.setValue(0)
            elif r.status_code == 401:
               iface.messageBar().pushMessage("UnAuthorized", "UnAuthorized this username or password was not correct.",level=Qgis.Critical, duration=2)
               self.logout()
        else:
            QgsMessageLog.logMessage(f"{error}", 'MyPlugin', level=Qgis.Critical)
    
    def sendExtent(self):
        extent = QgsRectangle(self.canvas.extent())
        canvas = iface.mapCanvas()
        destination_crs = canvas.mapSettings().destinationCrs()
        epsg_code = destination_crs.postgisSrid()
        # mytext = self.canvas.mapSettings().destinationCrs()
        QgsMessageLog.logMessage(f"Canvas CRS EPSG Code: {epsg_code}", 'MyPlugin', level=Qgis.Info)

        xmin = self.transFormCoor(
            epsg_code, extent.xMinimum(), extent.yMinimum())
        xmax = self.transFormCoor(
            epsg_code, extent.xMaximum(), extent.yMaximum())
        ymin = self.transFormCoor(
            epsg_code, extent.xMinimum(), extent.yMinimum())
        ymax = self.transFormCoor(
            epsg_code, extent.xMaximum(), extent.yMaximum())
            # int(mytext), extent.xMaximum(), extent.yMaximum())
        query_args = {'xmin': xmin.x(), 'xmax': xmax.x(
        ), 'ymin': ymin.y(), 'ymax': ymax.y()}
        QgsMessageLog.logMessage(f"Query param: {query_args}", 'MyPlugin', level=Qgis.Info)

        headers = {'Authorization': 'Bearer ' + self.token,
                   'Content-type': 'application/json', 'session': self.secret_txt}
        r = requests.post(self.url + "api/LTaxGIS/extent", json=query_args,headers=headers, verify=False)
        if r.status_code == requests.codes.ok:
            iface.messageBar().pushMessage("Completed",str(r.content),level=Qgis.Info, duration=5)
        elif r.status_code == 401:
            iface.messageBar().pushMessage("UnAuthorized", "UnAuthorized this username or password was not correct.", level=Qgis.Critical, duration=2)
            self.logout()
        else:
            iface.messageBar().pushMessage("ERROR", "ERROR Please contact admin.",level=Qgis.Critical, duration=2)

    def transFormCoor(self, fp, x, y):
        ""
        crsSrc = QgsCoordinateReferenceSystem(f"EPSG:{fp}")    # WGS 84
        crsDest = QgsCoordinateReferenceSystem("EPSG:4326")  # WGS 84
        xform = QgsCoordinateTransform(crsSrc, crsDest,QgsProject.instance())
        pt1 = xform.transform(x, y)
        return pt1
